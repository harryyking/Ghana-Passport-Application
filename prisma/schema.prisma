// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  USER
  ADMIN
  DELIVERY_AGENT
  VERIFICATION_OFFICER
}

enum PassportType {
  STANDARD
  DIPLOMATIC
  SERVICE
  OFFICIAL
  REPLACEMENT
}

enum ProcessingSpeed {
  STANDARD
  EXPEDITED
  PRIORITY
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  PAYMENT_PENDING
  PAYMENT_VERIFIED
  DOCUMENT_VERIFICATION
  PHOTO_VERIFICATION
  BIOMETRIC_PENDING
  BIOMETRIC_VERIFIED
  PROCESSING
  APPROVED
  REJECTED
  READY_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum DocumentStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKUP_READY
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RESCHEDULED
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
}

enum ComplaintStatus {
  SUBMITTED
  UNDER_REVIEW
  RESOLVED
  CLOSED
}

enum ComplaintType {
  LOST_PASSPORT
  DELAYED_PROCESSING
  INCORRECT_INFORMATION
  DELIVERY_ISSUE
  TECHNICAL_PROBLEM
  OTHER
}

model User {
  id                String            @id @default(cuid())
  ghanaCardNumber   String            @unique
  email             String            @unique
  password          String
  fullName          String
  dateOfBirth       DateTime
  placeOfBirth      String
  phoneNumber       String
  alternativePhone  String?
  role              UserRole          @default(USER)
  region            String?
  occupation        String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  profileImage      String?
  twoFactorSecret   String?
  isVerified        Boolean           @default(false)
  lastLogin         DateTime?
  
  // Address Information
  address           Address?
  
  // Emergency Contact
  emergencyContact  EmergencyContact?
  
  // Relations
  applications      Application[]
  familyMembers     FamilyMember[]    @relation("FamilyHead")
  notifications     Notification[]
  deliveries        Delivery[]        @relation("DeliveryAgent")
  auditLogs         AuditLog[]
  documents         Document[]
  complaints        Complaint[]
  notificationSettings NotificationSettings?
  securityAlerts    SecurityAlert[]
  travelAdvisories  TravelAdvisory[]
}

model Address {
  id               String    @id @default(cuid())
  streetAddress    String
  city             String
  region           String
  postalCode       String?
  landmark         String?
  gpsAddress       String?
  
  // Relations
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id])
}

model EmergencyContact {
  id               String    @id @default(cuid())
  fullName         String
  relationship     String
  phoneNumber      String
  alternativePhone String?
  email            String?
  
  // Relations
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id])
}

model Application {
  id                   String            @id @default(cuid())
  applicationType      PassportType
  processingSpeed      ProcessingSpeed
  status              ApplicationStatus  @default(DRAFT)
  submittedAt         DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  isRenewal           Boolean           @default(false)
  previousPassportNumber String?
  emergencyRequest    Boolean           @default(false)
  estimatedCompletion DateTime?
  rejectionReason     String?
  
  // Passport Details
  passportNumber      String?           @unique
  issueDate          DateTime?
  expiryDate         DateTime?
  issuingAuthority   String?
  
  // Relations
  userId             String
  user               User               @relation(fields: [userId], references: [id])
  documents          Document[]
  payments           Payment[]
  appointments       Appointment[]
  delivery           Delivery?
  biometrics         Biometric?
  reviews            ApplicationReview[]
  photoValidation    PhotoValidation?
  
  @@index([userId])
  FamilyMember FamilyMember[]
}

model FamilyMember {
  id                  String    @id @default(cuid())
  name                String
  relationship        String    // spouse or child
  identificationNumber String
  identificationType   String   // ghana-card or birth-certificate
  dateOfBirth         DateTime
  
  // Relations
  familyHeadId        String
  familyHead          User      @relation("FamilyHead", fields: [familyHeadId], references: [id])
  applications        Application[]
  
  @@index([familyHeadId])
}

model Document {
  id                String         @id @default(cuid())
  type              String        // passport-photo, ghana-card, birth-certificate, etc.
  fileUrl           String
  status            DocumentStatus @default(PENDING)
  uploadedAt        DateTime      @default(now())
  verifiedAt        DateTime?
  expiryDate        DateTime?
  verificationNotes  String?
  
  // Relations
  applicationId     String
  application       Application    @relation(fields: [applicationId], references: [id])
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  verifiedBy        String?
  
  @@index([applicationId])
  @@index([userId])
}

model PhotoValidation {
  id                String    @id @default(cuid())
  backgroundCheck   Boolean
  facePosition      Boolean
  lighting          Boolean
  resolution        Boolean
  size              Boolean
  expression        Boolean
  glasses           Boolean
  headCovering      Boolean
  validationNotes   String?
  
  // Relations
  applicationId     String    @unique
  application       Application @relation(fields: [applicationId], references: [id])
}

model Payment {
  id                String    @id @default(cuid())
  amount            Float
  currency          String    @default("GHS")
  method            String    // momo, card, bank-transfer
  status            String    // pending, completed, failed
  transactionId     String?
  paidAt            DateTime  @default(now())
  receiptUrl        String?
  
  // Relations
  applicationId     String
  application       Application @relation(fields: [applicationId], references: [id])
  
  @@index([applicationId])
}

model Appointment {
  id                String    @id @default(cuid())
  type              String    // biometric-capture, photo-capture, document-verification, pickup
  date              DateTime
  time              String
  location          String
  status            String    // scheduled, completed, cancelled, missed
  notes             String?
  reminderSent      Boolean   @default(false)
  
  // Relations
  applicationId     String
  application       Application @relation(fields: [applicationId], references: [id])
  
  @@index([applicationId])
}

model Biometric {
  id                String    @id @default(cuid())
  fingerprintData   String?
  facialData        String?
  capturedAt        DateTime  @default(now())
  location          String
  deviceId          String?
  officerId         String?
  
  // Relations
  applicationId     String    @unique
  application       Application @relation(fields: [applicationId], references: [id])
}

model Delivery {
  id                String         @id @default(cuid())
  status            DeliveryStatus @default(PENDING)
  address           String
  scheduledDate     DateTime?
  deliveredAt       DateTime?
  trackingNumber    String        @unique
  recipientName     String?
  recipientPhone    String?
  attemptCount      Int           @default(0)
  lastAttemptAt     DateTime?
  deliveryNotes     String?
  verificationCode  String?
  
  // Relations
  applicationId     String        @unique
  application       Application   @relation(fields: [applicationId], references: [id])
  agentId           String?
  agent             User?         @relation("DeliveryAgent", fields: [agentId], references: [id])
  
  @@index([agentId])
}

model ApplicationReview {
  id                String    @id @default(cuid())
  notes             String?
  decision          String    // approved, rejected, changes-requested
  reviewedAt        DateTime  @default(now())
  changesRequested  String?
  
  // Relations
  applicationId     String
  application       Application @relation(fields: [applicationId], references: [id])
  reviewerId        String
  
  @@index([applicationId])
}

model Notification {
  id                String           @id @default(cuid())
  type              NotificationType
  title             String
  message           String
  read              Boolean          @default(false)
  sentAt            DateTime         @default(now())
  readAt            DateTime?
  actionUrl         String?
  
  // Relations
  userId            String
  user              User             @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

model AuditLog {
  id                String    @id @default(cuid())
  action            String
  details           String?
  ipAddress         String?
  userAgent         String?
  timestamp         DateTime  @default(now())
  
  // Relations
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

model NotificationSettings {
  id                String    @id @default(cuid())
  email             Boolean   @default(true)
  sms               Boolean   @default(true)
  push              Boolean   @default(false)
  applicationUpdates Boolean   @default(true)
  deliveryUpdates   Boolean   @default(true)
  securityAlerts    Boolean   @default(true)
  
  // Relations
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id])
}

model SecurityAlert {
  id                String    @id @default(cuid())
  type              String    // suspicious-activity, failed-login, etc.
  message           String
  severity          String    // low, medium, high
  createdAt         DateTime  @default(now())
  resolvedAt        DateTime?
  resolution        String?
  
  // Relations
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

model Complaint {
  id                String         @id @default(cuid())
  type              ComplaintType
  status            ComplaintStatus @default(SUBMITTED)
  description       String
  submittedAt       DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  resolvedAt        DateTime?
  resolution        String?
  
  // Relations
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

model TravelAdvisory {
  id                String    @id @default(cuid())
  country           String
  advisoryText      String
  visaRequirements  String?
  healthRequirements String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  validUntil        DateTime?
  
  // Relations
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
}